---
- name: Ubuntu desktop environment playbook
  hosts: localhost
  roles:
    - { role: brave, become: true }
    - { role: rust, become: true }
    - { role: lazygit, become: true }
    - { role: nvim, become: true }
    - { role: locales, become: true }
    - { role: zsh-plugins, become: true }
    - { role: common, become: true }
    - { role: calibre, become: true }
    - role: geerlingguy.swap
      become: true
      swap_file_size_mb: "16384"
      swap_file_path: /swapfile2
    - role: geerlingguy.nodejs
      become: true
      nodejs_npm_global_packages:
        - name: jslint
        - name: node-sass
    - { role: anki, become: true }
    - { role: gotmax23.zoom, become: true }
    - { role: mullvad, become: true }
    - { role: diodonfrost.terraform, become: true }
    - { role: freedomofpress.signal-desktop, become: true }
    - role: ymajik.wireshark
      become: true
      wireshark_gui: true
    - { role: zsh, become: true }
    - role: gantsign.golang
      become: true
      golang_install_dir: "/usr/local/go"
      golang_version: "1.22.0"
    - { role: gantsign.helm, become: true }
    # - { role: dotfiles, become: true }
    - { role: geerlingguy.java, become: true }
    - role: tmiller02.geckodriver
      become: true
      geckodriver_version: "0.33.0"
    - role: gantsign.maven
      become: true
      maven_version: "3.3.9"
      maven_is_default_installation: true
      maven_fact_group_name: maven
    - role: webarchitect609.jet_brains_toolbox
      become: true
      toolbox_install_for_user: "nick"
      toolbox_install_dir: /usr/local/bin
    #  - role: gantsign.intellij-plugins
    #    users:
    #      - username: nick
    #        intellij_plugins:
    #          - Go
    - role: githubixx.kubectl
      become: true
    - role: haxorof.docker_ce
      become: true
      docker_users:
        - nick
      docker_compose: true
    - { role: gantsign.visual-studio-code, become: true }
    - role: gantsign.oh-my-zsh
      become: true
      users:
        - username: nick
      plugins:
        - git
        - zsh-autosuggestions
        - zsh-syntax-highlighting
        - zsh-z
        - kubectl
      update_mode: auto
      write_zshrc: false
    - role: 0x0I.tmux
      become: true
      comment: "stuff"
      commands:
        - "source-file": "'~/.tmux.conf'"
    - { role: python, become: true }
    - { role: python-tools, become: true }
    - { role: ssh, become: true }
    # Desktop roles
    - { role: desktop, become: true }
    # - { role: desktop-cleanup, become: true }
    # - { role: desktop-autostart, become: true }
    - { role: chromium, become: true }
    - { role: dbeaver, become: true }
    - { role: firefox, become: true }
    - { role: gimp, become: true }
    - { role: thunderbird, become: true }
  tasks:
    # dotfiles, zsh
    - name: copy git config
      copy:
        src: dotfiles/.gitconfig
        dest: /home/nick/.gitconfig
      delegate_to: localhost
    - name: copy zsh config
      copy:
        src: dotfiles/.zshrc
        dest: /home/nick/.zshrc
      delegate_to: localhost
    - name: copy tmux config
      copy:
        src: dotfiles/.tmux.conf
        dest: /home/nick/.tmux.conf
      delegate_to: localhost
    - name: Touch secrets
      ansible.builtin.file:
        path: /home/nick/.secrets
        state: touch
        mode: u=rw,g=r,o=r
      # docker
    - name: Create "docker" group
      become: true
      group:
        name: "docker"
        state: present
    - name: Add remote "ubuntu" user to "docker" group
      become: true
      user:
        name: "nick"
        group: "docker"
        append: yes
    - name: Install helm plugins
      shell: wget -qO - "{{ item.url}}" | tar -C "$(helm env HELM_PLUGINS)" -xzf-
      loop:
        - url: https://github.com/jkroepke/helm-secrets/releases/latest/download/helm-secrets.tar.gz
        - url: https://github.com/databus23/helm-diff/releases/latest/download/helm-diff-linux-amd64.tgz
    - name: install helmfile
      become: true
      shell: |
        wget https://github.com/helmfile/helmfile/releases/download/v0.156.0/helmfile_0.156.0_linux_amd64.tar.gz
        mkdir helmfile
        tar -xvf helmfile_0.156.0_linux_amd64.tar.gz -C helmfile
        mv helmfile/helmfile /usr/local/bin/helmfile
        chmod +x /usr/local/bin/helmfile
        rm -rf helmfile
    - name: install jwt-cli
      become: true
      shell: |
        wget https://github.com/mike-engel/jwt-cli/releases/download/6.0.0/jwt-linux.tar.gz
        tar -xvf jwt-linux.tar.gz
        rm jwt-linux.tar.gz
        mv jwt /usr/local/bin/jwt
    - name: install sops
      become: true
      shell: |
        curl -LO {{ item.url }}
        mv {{ item.binary }} {{ item.dest}}
        chmod +x {{ item.dest }}
      loop:
        - url: https://github.com/getsops/sops/releases/download/v3.8.0-rc.1/sops-v3.8.0-rc.1.linux.amd64
          binary: sops-v3.8.0-rc.1.linux.amd64
          dest: /usr/local/bin/sops
    - name: Install applications
      become: true
      community.general.snap:
        name: "{{ item.val }}"
      loop:
        - { val: "bitwarden" }
        - { val: "hugo" }
        - { val: "spotify" }
        - { val: "slack" }
    # onedrive client
    - name: onedrive gpg
      become: true
      shell: wget -qO - https://download.opensuse.org/repositories/home:/npreining:/debian-ubuntu-onedrive/xUbuntu_22.04/Release.key | gpg --dearmor | sudo tee /usr/share/keyrings/obs-onedrive.gpg > /dev/null
    - name: open suse build service repo
      become: true
      shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/obs-onedrive.gpg] https://download.opensuse.org/repositories/home:/npreining:/debian-ubuntu-onedrive/xUbuntu_22.04/ ./" | sudo tee /etc/apt/sources.list.d/onedrive.list
    - name: install onedrive client
      become: true
      ansible.builtin.apt:
        name: onedrive
        install_recommends: false
    - name: copy onedrive sync list
      copy:
        src: dotfiles/onedrive_sync_list
        dest: /home/nick/.config/onedrive/sync_list
      delegate_to: localhost
    # gh cli--note, this is untested
    - name: Add GitHub CLI GPG key
      ansible.builtin.apt_key:
        url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
        state: present
    - name: Add GitHub CLI repository
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ ansible_architecture }} signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"
        state: present
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
    - name: Install gh
      ansible.builtin.apt:
        name: gh
        state: present
    # dev tools
    - name: Install Go packages
      command:
        cmd: "go install {{ item.package }}@latest"
      loop:
        - { package: "github.com/gofireflyio/aiac/v3" }
        - { package: "github.com/deepmap/oapi-codegen/cmd/oapi-codegen" }
        - { package: "github.com/spf13/cobra-cli" }
        - { package: "github.com/danielgtaylor/restish" }
        - { package: "golang.org/x/tools/cmd/godoc@latest" }
        - { package: "github.com/digitalocean/doctl/cmd/doctl@latest" }
        - { package: "github.com/nats-io/natscli/nats@latest" }
      loop_control:
        label: "{{ item.package }}"

      # all of this is untested
    - name: Download and install NVM
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

    - name: Install Node.js LTS version
      shell: |
        source $HOME/.nvm/nvm.sh
        nvm install --lts
        nvm use --lts
        nvm alias default lts/*

    - name: Ensure npm is up to date
      shell: |
        source $HOME/.nvm/nvm.sh
        npm install -g npm

    - name: Install npx packages
      shell: |
        source $HOME/.nvm/nvm.sh
        npx @anthropic-ai/claude-code
        npm install -g @google/gemini-cli
        
